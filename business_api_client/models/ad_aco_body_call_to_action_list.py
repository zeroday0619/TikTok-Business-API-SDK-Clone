# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyCallToActionList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_to_action': 'str'
    }

    attribute_map = {
        'call_to_action': 'call_to_action'
    }

    def __init__(self, call_to_action=None):  # noqa: E501
        """AdAcoBodyCallToActionList - a model defined in Swagger"""  # noqa: E501
        self._call_to_action = None
        self.discriminator = None
        if call_to_action is not None:
            self.call_to_action = call_to_action

    @property
    def call_to_action(self):
        """Gets the call_to_action of this AdAcoBodyCallToActionList.  # noqa: E501

        Call-to-action text. For enum values, see [Enumeration - Call-to-action](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138).  # noqa: E501

        :return: The call_to_action of this AdAcoBodyCallToActionList.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this AdAcoBodyCallToActionList.

        Call-to-action text. For enum values, see [Enumeration - Call-to-action](https://ads.tiktok.com/marketing_api/docs?id=1737174886619138).  # noqa: E501

        :param call_to_action: The call_to_action of this AdAcoBodyCallToActionList.  # noqa: E501
        :type: str
        """

        self._call_to_action = call_to_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyCallToActionList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyCallToActionList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
