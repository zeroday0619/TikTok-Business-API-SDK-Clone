# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyCommonMaterialTrackingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'click_tracking_urls': 'list[str]',
        'impression_tracking_urls': 'list[str]',
        'tracking_app_id': 'str',
        'tracking_offline_event_set_ids': 'list[str]',
        'tracking_pixel_id': 'str',
        'vast_moat_enabled': 'bool'
    }

    attribute_map = {
        'click_tracking_urls': 'click_tracking_urls',
        'impression_tracking_urls': 'impression_tracking_urls',
        'tracking_app_id': 'tracking_app_id',
        'tracking_offline_event_set_ids': 'tracking_offline_event_set_ids',
        'tracking_pixel_id': 'tracking_pixel_id',
        'vast_moat_enabled': 'vast_moat_enabled'
    }

    def __init__(self, click_tracking_urls=None, impression_tracking_urls=None, tracking_app_id=None, tracking_offline_event_set_ids=None, tracking_pixel_id=None, vast_moat_enabled=None):  # noqa: E501
        """AdAcoBodyCommonMaterialTrackingInfo - a model defined in Swagger"""  # noqa: E501
        self._click_tracking_urls = None
        self._impression_tracking_urls = None
        self._tracking_app_id = None
        self._tracking_offline_event_set_ids = None
        self._tracking_pixel_id = None
        self._vast_moat_enabled = None
        self.discriminator = None
        if click_tracking_urls is not None:
            self.click_tracking_urls = click_tracking_urls
        if impression_tracking_urls is not None:
            self.impression_tracking_urls = impression_tracking_urls
        if tracking_app_id is not None:
            self.tracking_app_id = tracking_app_id
        if tracking_offline_event_set_ids is not None:
            self.tracking_offline_event_set_ids = tracking_offline_event_set_ids
        if tracking_pixel_id is not None:
            self.tracking_pixel_id = tracking_pixel_id
        if vast_moat_enabled is not None:
            self.vast_moat_enabled = vast_moat_enabled

    @property
    def click_tracking_urls(self):
        """Gets the click_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501

        Click Tracking URL. URL generated by your data partner to track click events in your ads. Generally you can find and copy the URL from their platform. <ul><li> If the partner ID for the App (`app_id` specified at the ad group level ) that you want to track is `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field. If you do, this field will be ignored. You can obtain the partner ID of an App through `partner_id` returned from [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786) or [/app/info/](https://ads.tiktok.com/marketing_api/docs?id=1740859272887297).</li><li> If self-attribution has been enabled for the App (`app_id` specified at the ad group level ) that you want to track and the partner ID for the App is not `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field because this field will default to the Click Tracking URL you have configured for the App, and updates to the URL are not supported  # noqa: E501

        :return: The click_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._click_tracking_urls

    @click_tracking_urls.setter
    def click_tracking_urls(self, click_tracking_urls):
        """Sets the click_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.

        Click Tracking URL. URL generated by your data partner to track click events in your ads. Generally you can find and copy the URL from their platform. <ul><li> If the partner ID for the App (`app_id` specified at the ad group level ) that you want to track is `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field. If you do, this field will be ignored. You can obtain the partner ID of an App through `partner_id` returned from [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786) or [/app/info/](https://ads.tiktok.com/marketing_api/docs?id=1740859272887297).</li><li> If self-attribution has been enabled for the App (`app_id` specified at the ad group level ) that you want to track and the partner ID for the App is not `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field because this field will default to the Click Tracking URL you have configured for the App, and updates to the URL are not supported  # noqa: E501

        :param click_tracking_urls: The click_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: list[str]
        """

        self._click_tracking_urls = click_tracking_urls

    @property
    def impression_tracking_urls(self):
        """Gets the impression_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501

        Default Impression Tracking URL. URL generated by your data partner to track impression events in your ads. Generally you can find and copy the URL from their platform. <ul><li> If the partner ID for the App (`app_id` specified at the ad group level ) that you want to track is `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field. If you do, this field will be ignored. You can obtain the partner ID of an App through `partner_id` returned from [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786) or [/app/info/](https://ads.tiktok.com/marketing_api/docs?id=1740859272887297)  # noqa: E501

        :return: The impression_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._impression_tracking_urls

    @impression_tracking_urls.setter
    def impression_tracking_urls(self, impression_tracking_urls):
        """Sets the impression_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.

        Default Impression Tracking URL. URL generated by your data partner to track impression events in your ads. Generally you can find and copy the URL from their platform. <ul><li> If the partner ID for the App (`app_id` specified at the ad group level ) that you want to track is `44` (TikTok Business SDK) or `49` (TikTok App API), you don't need to pass in this field. If you do, this field will be ignored. You can obtain the partner ID of an App through `partner_id` returned from [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786) or [/app/info/](https://ads.tiktok.com/marketing_api/docs?id=1740859272887297)  # noqa: E501

        :param impression_tracking_urls: The impression_tracking_urls of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: list[str]
        """

        self._impression_tracking_urls = impression_tracking_urls

    @property
    def tracking_app_id(self):
        """Gets the tracking_app_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501

        The ID of the application that you want to track. You can use this field to track offsite app events. <br>This field supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads (`RF_REACH`).<br>If `app_id` is specified at the ad group level and you want to track offsite app events, then the application ID you pass via this field must be the same ID that you specified at the ad group level. Otherwise, you can pass in any application ID that you'd like to track via this field.<br>You can get application ID (`app_id`) via [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786).  # noqa: E501

        :return: The tracking_app_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._tracking_app_id

    @tracking_app_id.setter
    def tracking_app_id(self, tracking_app_id):
        """Sets the tracking_app_id of this AdAcoBodyCommonMaterialTrackingInfo.

        The ID of the application that you want to track. You can use this field to track offsite app events. <br>This field supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads (`RF_REACH`).<br>If `app_id` is specified at the ad group level and you want to track offsite app events, then the application ID you pass via this field must be the same ID that you specified at the ad group level. Otherwise, you can pass in any application ID that you'd like to track via this field.<br>You can get application ID (`app_id`) via [/app/list/](https://ads.tiktok.com/marketing_api/docs?id=1740859313270786).  # noqa: E501

        :param tracking_app_id: The tracking_app_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: str
        """

        self._tracking_app_id = tracking_app_id

    @property
    def tracking_offline_event_set_ids(self):
        """Gets the tracking_offline_event_set_ids of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501

        A list of Offline Event set IDs that you want to track. You can use this field to track and measure offline activity from people that see or interact with your ads.  # noqa: E501

        :return: The tracking_offline_event_set_ids of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._tracking_offline_event_set_ids

    @tracking_offline_event_set_ids.setter
    def tracking_offline_event_set_ids(self, tracking_offline_event_set_ids):
        """Sets the tracking_offline_event_set_ids of this AdAcoBodyCommonMaterialTrackingInfo.

        A list of Offline Event set IDs that you want to track. You can use this field to track and measure offline activity from people that see or interact with your ads.  # noqa: E501

        :param tracking_offline_event_set_ids: The tracking_offline_event_set_ids of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: list[str]
        """

        self._tracking_offline_event_set_ids = tracking_offline_event_set_ids

    @property
    def tracking_pixel_id(self):
        """Gets the tracking_pixel_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501

        The pixel ID that you'd like to track. You can use this field to track offsite events. It supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads.  # noqa: E501

        :return: The tracking_pixel_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._tracking_pixel_id

    @tracking_pixel_id.setter
    def tracking_pixel_id(self, tracking_pixel_id):
        """Sets the tracking_pixel_id of this AdAcoBodyCommonMaterialTrackingInfo.

        The pixel ID that you'd like to track. You can use this field to track offsite events. It supports the campaign objectives for both Auction ads (`REACH`, `VIDEO_VIEWS`, `TRAFFIC`, `WEB_CONVERSIONS`, `LEAD_GENERATION`, `APP_PROMOTION`, `PRODUCT_SALES`, `ENGAGEMENT`) and Reach & Frequency ads.  # noqa: E501

        :param tracking_pixel_id: The tracking_pixel_id of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: str
        """

        self._tracking_pixel_id = tracking_pixel_id

    @property
    def vast_moat_enabled(self):
        """Gets the vast_moat_enabled of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501


        :return: The vast_moat_enabled of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._vast_moat_enabled

    @vast_moat_enabled.setter
    def vast_moat_enabled(self, vast_moat_enabled):
        """Sets the vast_moat_enabled of this AdAcoBodyCommonMaterialTrackingInfo.


        :param vast_moat_enabled: The vast_moat_enabled of this AdAcoBodyCommonMaterialTrackingInfo.  # noqa: E501
        :type: bool
        """

        self._vast_moat_enabled = vast_moat_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyCommonMaterialTrackingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyCommonMaterialTrackingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
