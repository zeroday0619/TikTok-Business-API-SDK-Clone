# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyMediaInfoVideoInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'video_id': 'str'
    }

    attribute_map = {
        'file_name': 'file_name',
        'video_id': 'video_id'
    }

    def __init__(self, file_name=None, video_id=None):  # noqa: E501
        """AdAcoBodyMediaInfoVideoInfo - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._video_id = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if video_id is not None:
            self.video_id = video_id

    @property
    def file_name(self):
        """Gets the file_name of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501

        Video name.  # noqa: E501

        :return: The file_name of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AdAcoBodyMediaInfoVideoInfo.

        Video name.  # noqa: E501

        :param file_name: The file_name of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def video_id(self):
        """Gets the video_id of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501

        Video ID. You can get the video ID when you upload a video using the [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449) endpoint. To ensure a smooth integration journey, we recommned that you use [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)(`upload_type` = `UPLOAD_BY_VIDEO_ID`)to bind video ID with your advertiser ID.  # noqa: E501

        :return: The video_id of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this AdAcoBodyMediaInfoVideoInfo.

        Video ID. You can get the video ID when you upload a video using the [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449) endpoint. To ensure a smooth integration journey, we recommned that you use [/file/video/ad/upload/](https://ads.tiktok.com/marketing_api/docs?id=1737587322856449)(`upload_type` = `UPLOAD_BY_VIDEO_ID`)to bind video ID with your advertiser ID.  # noqa: E501

        :param video_id: The video_id of this AdAcoBodyMediaInfoVideoInfo.  # noqa: E501
        :type: str
        """

        self._video_id = video_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyMediaInfoVideoInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyMediaInfoVideoInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
