# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class CampaignCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'app_id': 'str',
        'app_promotion_type': 'str',
        'budget': 'float',
        'budget_mode': 'str',
        'budget_optimize_on': 'bool',
        'campaign_name': 'str',
        'campaign_type': 'str',
        'objective_type': 'str',
        'operation_status': 'str',
        'optimization_goal': 'str',
        'rf_campaign_type': 'str',
        'special_industries': 'list[str]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'app_id': 'app_id',
        'app_promotion_type': 'app_promotion_type',
        'budget': 'budget',
        'budget_mode': 'budget_mode',
        'budget_optimize_on': 'budget_optimize_on',
        'campaign_name': 'campaign_name',
        'campaign_type': 'campaign_type',
        'objective_type': 'objective_type',
        'operation_status': 'operation_status',
        'optimization_goal': 'optimization_goal',
        'rf_campaign_type': 'rf_campaign_type',
        'special_industries': 'special_industries'
    }

    def __init__(self, advertiser_id=None, app_id=None, app_promotion_type=None, budget=None, budget_mode=None, budget_optimize_on=None, campaign_name=None, campaign_type=None, objective_type=None, operation_status=None, optimization_goal=None, rf_campaign_type=None, special_industries=None):  # noqa: E501
        """CampaignCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._app_id = None
        self._app_promotion_type = None
        self._budget = None
        self._budget_mode = None
        self._budget_optimize_on = None
        self._campaign_name = None
        self._campaign_type = None
        self._objective_type = None
        self._operation_status = None
        self._optimization_goal = None
        self._rf_campaign_type = None
        self._special_industries = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if app_id is not None:
            self.app_id = app_id
        if app_promotion_type is not None:
            self.app_promotion_type = app_promotion_type
        if budget is not None:
            self.budget = budget
        if budget_mode is not None:
            self.budget_mode = budget_mode
        if budget_optimize_on is not None:
            self.budget_optimize_on = budget_optimize_on
        self.campaign_name = campaign_name
        if campaign_type is not None:
            self.campaign_type = campaign_type
        self.objective_type = objective_type
        if operation_status is not None:
            self.operation_status = operation_status
        if optimization_goal is not None:
            self.optimization_goal = optimization_goal
        if rf_campaign_type is not None:
            self.rf_campaign_type = rf_campaign_type
        if special_industries is not None:
            self.special_industries = special_industries

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CampaignCreateBody.  # noqa: E501

        Advertiser ID  # noqa: E501

        :return: The advertiser_id of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CampaignCreateBody.

        Advertiser ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this CampaignCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def app_id(self):
        """Gets the app_id of this CampaignCreateBody.  # noqa: E501

        App ID, required when the campaign is an iOS 14 Dedicated Campaign (camapign_type=IOS14_CAMPAIGN) with the advertising objective (objective_type) as PRODUCT_SALES.  # noqa: E501

        :return: The app_id of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CampaignCreateBody.

        App ID, required when the campaign is an iOS 14 Dedicated Campaign (camapign_type=IOS14_CAMPAIGN) with the advertising objective (objective_type) as PRODUCT_SALES.  # noqa: E501

        :param app_id: The app_id of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_promotion_type(self):
        """Gets the app_promotion_type of this CampaignCreateBody.  # noqa: E501

        App promotion type. Required when `objective_type` is `APP_PROMOTION`. Enum values- `APP_INSTALL`, `APP_RETARGETING`. Note- `APP_INSTALL` can be used in an iOS14 Dedicated Campaign, while `APP_RETARGETING` cannot be used.  # noqa: E501

        :return: The app_promotion_type of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._app_promotion_type

    @app_promotion_type.setter
    def app_promotion_type(self, app_promotion_type):
        """Sets the app_promotion_type of this CampaignCreateBody.

        App promotion type. Required when `objective_type` is `APP_PROMOTION`. Enum values- `APP_INSTALL`, `APP_RETARGETING`. Note- `APP_INSTALL` can be used in an iOS14 Dedicated Campaign, while `APP_RETARGETING` cannot be used.  # noqa: E501

        :param app_promotion_type: The app_promotion_type of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._app_promotion_type = app_promotion_type

    @property
    def budget(self):
        """Gets the budget of this CampaignCreateBody.  # noqa: E501

        Campaign budget, required when budget_mode is BUDGET_MODE_DAY or BUDGET_MODE_TOTAL. To learn about the mininum budget and how to set budget types, see Budget settings.  # noqa: E501

        :return: The budget of this CampaignCreateBody.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this CampaignCreateBody.

        Campaign budget, required when budget_mode is BUDGET_MODE_DAY or BUDGET_MODE_TOTAL. To learn about the mininum budget and how to set budget types, see Budget settings.  # noqa: E501

        :param budget: The budget of this CampaignCreateBody.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def budget_mode(self):
        """Gets the budget_mode of this CampaignCreateBody.  # noqa: E501

        Budget mode. When Campaign Budget Optimization is enabled, only BUDGET_MODE_DAY is supported. When \"objective_type\" is RF_REACH, only BUDGET_MODE_INFINITE is supported. To learn about how to set budget types, see Budget setting.  # noqa: E501

        :return: The budget_mode of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._budget_mode

    @budget_mode.setter
    def budget_mode(self, budget_mode):
        """Sets the budget_mode of this CampaignCreateBody.

        Budget mode. When Campaign Budget Optimization is enabled, only BUDGET_MODE_DAY is supported. When \"objective_type\" is RF_REACH, only BUDGET_MODE_INFINITE is supported. To learn about how to set budget types, see Budget setting.  # noqa: E501

        :param budget_mode: The budget_mode of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._budget_mode = budget_mode

    @property
    def budget_optimize_on(self):
        """Gets the budget_optimize_on of this CampaignCreateBody.  # noqa: E501

        Whether to enable Campaign Budget Optimization. True: Enabled. False: Not enabled. Default: True. For details about Campaign Budget Optimization (CBO), see Campaign Budget Optimization.  # noqa: E501

        :return: The budget_optimize_on of this CampaignCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._budget_optimize_on

    @budget_optimize_on.setter
    def budget_optimize_on(self, budget_optimize_on):
        """Sets the budget_optimize_on of this CampaignCreateBody.

        Whether to enable Campaign Budget Optimization. True: Enabled. False: Not enabled. Default: True. For details about Campaign Budget Optimization (CBO), see Campaign Budget Optimization.  # noqa: E501

        :param budget_optimize_on: The budget_optimize_on of this CampaignCreateBody.  # noqa: E501
        :type: bool
        """

        self._budget_optimize_on = budget_optimize_on

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CampaignCreateBody.  # noqa: E501

        Campaign name. It can contain up to 512 characters. Emoji is not supported. Note: Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :return: The campaign_name of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CampaignCreateBody.

        Campaign name. It can contain up to 512 characters. Emoji is not supported. Note: Each word in Chinese or Japanese counts as two characters, while each letter in English counts as one character.  # noqa: E501

        :param campaign_name: The campaign_name of this CampaignCreateBody.  # noqa: E501
        :type: str
        """
        if campaign_name is None:
            raise ValueError("Invalid value for `campaign_name`, must not be `None`")  # noqa: E501

        self._campaign_name = campaign_name

    @property
    def campaign_type(self):
        """Gets the campaign_type of this CampaignCreateBody.  # noqa: E501

        Enums values: REGULAR_CAMPAIGN, IOS14_CAMPAIGN. The value IOS14_CAMPAIGN supports the advertising objective PRODUCT_SALES only. For iOS 14 Dedicated Campaign with objectives other than PRODUCT_SALES , set campaign_type as REGULAR_CAMPAIGN.  # noqa: E501

        :return: The campaign_type of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_type

    @campaign_type.setter
    def campaign_type(self, campaign_type):
        """Sets the campaign_type of this CampaignCreateBody.

        Enums values: REGULAR_CAMPAIGN, IOS14_CAMPAIGN. The value IOS14_CAMPAIGN supports the advertising objective PRODUCT_SALES only. For iOS 14 Dedicated Campaign with objectives other than PRODUCT_SALES , set campaign_type as REGULAR_CAMPAIGN.  # noqa: E501

        :param campaign_type: The campaign_type of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._campaign_type = campaign_type

    @property
    def objective_type(self):
        """Gets the objective_type of this CampaignCreateBody.  # noqa: E501

        Advertising objective. For enum values and descriptions, see Objectives.  # noqa: E501

        :return: The objective_type of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._objective_type

    @objective_type.setter
    def objective_type(self, objective_type):
        """Sets the objective_type of this CampaignCreateBody.

        Advertising objective. For enum values and descriptions, see Objectives.  # noqa: E501

        :param objective_type: The objective_type of this CampaignCreateBody.  # noqa: E501
        :type: str
        """
        if objective_type is None:
            raise ValueError("Invalid value for `objective_type`, must not be `None`")  # noqa: E501

        self._objective_type = objective_type

    @property
    def operation_status(self):
        """Gets the operation_status of this CampaignCreateBody.  # noqa: E501

        The field operation_status is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. If you pass in this field without applying for allowlisting first, the field will be ignored and no error message will appear. For Reach & Frequency campaigns, please specify operation_status as ENABLE or do not pass in operation_status. Do not specify operation_status as DISABLE.  The status of the campaign when created. Enum values: ENABLE : The campaign is enabled when created. DISABLE : The campaign is disabled when created. Default value: ENABLE. If you want to update the status of the campaign after creation, use the /campaign/status/update/ endpoint.  # noqa: E501

        :return: The operation_status of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this CampaignCreateBody.

        The field operation_status is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative. If you pass in this field without applying for allowlisting first, the field will be ignored and no error message will appear. For Reach & Frequency campaigns, please specify operation_status as ENABLE or do not pass in operation_status. Do not specify operation_status as DISABLE.  The status of the campaign when created. Enum values: ENABLE : The campaign is enabled when created. DISABLE : The campaign is disabled when created. Default value: ENABLE. If you want to update the status of the campaign after creation, use the /campaign/status/update/ endpoint.  # noqa: E501

        :param operation_status: The operation_status of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._operation_status = operation_status

    @property
    def optimization_goal(self):
        """Gets the optimization_goal of this CampaignCreateBody.  # noqa: E501

        Optimization goal at the campaign level. Required when Campaign Budget Optimization is enabled. Allowed values: CONVERT, INSTALL, VALUE, IN_APP_EVENT and LEAD_GENERATION.  # noqa: E501

        :return: The optimization_goal of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._optimization_goal

    @optimization_goal.setter
    def optimization_goal(self, optimization_goal):
        """Sets the optimization_goal of this CampaignCreateBody.

        Optimization goal at the campaign level. Required when Campaign Budget Optimization is enabled. Allowed values: CONVERT, INSTALL, VALUE, IN_APP_EVENT and LEAD_GENERATION.  # noqa: E501

        :param optimization_goal: The optimization_goal of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._optimization_goal = optimization_goal

    @property
    def rf_campaign_type(self):
        """Gets the rf_campaign_type of this CampaignCreateBody.  # noqa: E501

        When `objective_type` is specified as `RF_REACH`, use this field to set the campaign as a TikTok Pulse campaign, then you can get available premium contextual tags. Do not pass in this field when `objective_type` is not specified as `RF_REACH`.Enum values- `STANDARD` (Reach & Frequency campaign), `PULSE`(TikTok Pulse campaign). Note<- This is an allowlist-only feature. If you would like to access it, please contact your TikTok representative. This field cannot be updated after creation. If you select `rf_campaign_type` to `PULSE` , then you must enter contextual tags of `PREMIUM` type in the `contextual_tag_ids`  field in [/adgroup/rf/create/](https://ads.tiktok.com/marketing_api/docs?id=1738235338194945). In this case, the CPM in your ad group is fixed. If you set `rf_campaign_type` to `PULSE`, then the targeting locations cannot be updated in  [/adgroup/rf/update/](https://ads.tiktok.com/marketing_api/docs?id=1738235402874882). If you set `rf_campaign_type` to `PULSE`, then `feed_type` cannot be `TOP_FEED` in  [/adgroup/rf/create/](https://ads.tiktok.com/marketing_api/docs?id=1738235338194945).  # noqa: E501

        :return: The rf_campaign_type of this CampaignCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._rf_campaign_type

    @rf_campaign_type.setter
    def rf_campaign_type(self, rf_campaign_type):
        """Sets the rf_campaign_type of this CampaignCreateBody.

        When `objective_type` is specified as `RF_REACH`, use this field to set the campaign as a TikTok Pulse campaign, then you can get available premium contextual tags. Do not pass in this field when `objective_type` is not specified as `RF_REACH`.Enum values- `STANDARD` (Reach & Frequency campaign), `PULSE`(TikTok Pulse campaign). Note<- This is an allowlist-only feature. If you would like to access it, please contact your TikTok representative. This field cannot be updated after creation. If you select `rf_campaign_type` to `PULSE` , then you must enter contextual tags of `PREMIUM` type in the `contextual_tag_ids`  field in [/adgroup/rf/create/](https://ads.tiktok.com/marketing_api/docs?id=1738235338194945). In this case, the CPM in your ad group is fixed. If you set `rf_campaign_type` to `PULSE`, then the targeting locations cannot be updated in  [/adgroup/rf/update/](https://ads.tiktok.com/marketing_api/docs?id=1738235402874882). If you set `rf_campaign_type` to `PULSE`, then `feed_type` cannot be `TOP_FEED` in  [/adgroup/rf/create/](https://ads.tiktok.com/marketing_api/docs?id=1738235338194945).  # noqa: E501

        :param rf_campaign_type: The rf_campaign_type of this CampaignCreateBody.  # noqa: E501
        :type: str
        """

        self._rf_campaign_type = rf_campaign_type

    @property
    def special_industries(self):
        """Gets the special_industries of this CampaignCreateBody.  # noqa: E501

        Ad categories. Enum values: HOUSING(Ads for real estate listings, homeowners insurance, mortgage loans or other related opportunities.) EMPLOYMENT(Ads for job offers, internship, professional certification programs or other related opportunities.) CREDIT(Ads for credit card offers, auto loans, long-term financing or other related opportunities.) Note: Once you've specified the industry type, the system will adjust your ad group target options to help you comply with advertising policies. See Ad targeting to know more.  # noqa: E501

        :return: The special_industries of this CampaignCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_industries

    @special_industries.setter
    def special_industries(self, special_industries):
        """Sets the special_industries of this CampaignCreateBody.

        Ad categories. Enum values: HOUSING(Ads for real estate listings, homeowners insurance, mortgage loans or other related opportunities.) EMPLOYMENT(Ads for job offers, internship, professional certification programs or other related opportunities.) CREDIT(Ads for credit card offers, auto loans, long-term financing or other related opportunities.) Note: Once you've specified the industry type, the system will adjust your ad group target options to help you comply with advertising policies. See Ad targeting to know more.  # noqa: E501

        :param special_industries: The special_industries of this CampaignCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._special_industries = special_industries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
