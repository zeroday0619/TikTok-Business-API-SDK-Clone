# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyDisplayNameList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'landing_page_name': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'landing_page_name': 'landing_page_name'
    }

    def __init__(self, app_name=None, landing_page_name=None):  # noqa: E501
        """AdAcoBodyDisplayNameList - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._landing_page_name = None
        self.discriminator = None
        if app_name is not None:
            self.app_name = app_name
        if landing_page_name is not None:
            self.landing_page_name = landing_page_name

    @property
    def app_name(self):
        """Gets the app_name of this AdAcoBodyDisplayNameList.  # noqa: E501

        App name that is displayed in the ad. If not specified, the name in the app store will be used. Number of characters allowed- 1-40. If the name in the app store exceeds 40 characters, you must pass in a new app name with this field.  # noqa: E501

        :return: The app_name of this AdAcoBodyDisplayNameList.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AdAcoBodyDisplayNameList.

        App name that is displayed in the ad. If not specified, the name in the app store will be used. Number of characters allowed- 1-40. If the name in the app store exceeds 40 characters, you must pass in a new app name with this field.  # noqa: E501

        :param app_name: The app_name of this AdAcoBodyDisplayNameList.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def landing_page_name(self):
        """Gets the landing_page_name of this AdAcoBodyDisplayNameList.  # noqa: E501

        The display name of the landing page, required when the promotion type is landing page. Length limit- 1-40 characters.  # noqa: E501

        :return: The landing_page_name of this AdAcoBodyDisplayNameList.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_name

    @landing_page_name.setter
    def landing_page_name(self, landing_page_name):
        """Sets the landing_page_name of this AdAcoBodyDisplayNameList.

        The display name of the landing page, required when the promotion type is landing page. Length limit- 1-40 characters.  # noqa: E501

        :param landing_page_name: The landing_page_name of this AdAcoBodyDisplayNameList.  # noqa: E501
        :type: str
        """

        self._landing_page_name = landing_page_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyDisplayNameList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyDisplayNameList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
