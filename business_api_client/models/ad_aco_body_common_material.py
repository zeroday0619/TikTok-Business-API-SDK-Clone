# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyCommonMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_name': 'str',
        'call_to_action_id': 'str',
        'creative_authorized': 'bool',
        'fallback_type': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'is_smart_creative': 'bool',
        'playable_url': 'str',
        'tracking_info': 'AdAcoBodyCommonMaterialTrackingInfo'
    }

    attribute_map = {
        'ad_name': 'ad_name',
        'call_to_action_id': 'call_to_action_id',
        'creative_authorized': 'creative_authorized',
        'fallback_type': 'fallback_type',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'is_smart_creative': 'is_smart_creative',
        'playable_url': 'playable_url',
        'tracking_info': 'tracking_info'
    }

    def __init__(self, ad_name=None, call_to_action_id=None, creative_authorized=None, fallback_type=None, identity_id=None, identity_type=None, is_smart_creative=None, playable_url=None, tracking_info=None):  # noqa: E501
        """AdAcoBodyCommonMaterial - a model defined in Swagger"""  # noqa: E501
        self._ad_name = None
        self._call_to_action_id = None
        self._creative_authorized = None
        self._fallback_type = None
        self._identity_id = None
        self._identity_type = None
        self._is_smart_creative = None
        self._playable_url = None
        self._tracking_info = None
        self.discriminator = None
        if ad_name is not None:
            self.ad_name = ad_name
        if call_to_action_id is not None:
            self.call_to_action_id = call_to_action_id
        if creative_authorized is not None:
            self.creative_authorized = creative_authorized
        if fallback_type is not None:
            self.fallback_type = fallback_type
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_type is not None:
            self.identity_type = identity_type
        if is_smart_creative is not None:
            self.is_smart_creative = is_smart_creative
        if playable_url is not None:
            self.playable_url = playable_url
        if tracking_info is not None:
            self.tracking_info = tracking_info

    @property
    def ad_name(self):
        """Gets the ad_name of this AdAcoBodyCommonMaterial.  # noqa: E501

        Ad name. Set as \" \" (Empty string) for it to be automatically generated. The format of auto-generated ad name is- creative name + creation time (e.g. adcreative20210111190739). Character limit is 512 and cannot contain emoji.  # noqa: E501

        :return: The ad_name of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._ad_name

    @ad_name.setter
    def ad_name(self, ad_name):
        """Sets the ad_name of this AdAcoBodyCommonMaterial.

        Ad name. Set as \" \" (Empty string) for it to be automatically generated. The format of auto-generated ad name is- creative name + creation time (e.g. adcreative20210111190739). Character limit is 512 and cannot contain emoji.  # noqa: E501

        :param ad_name: The ad_name of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._ad_name = ad_name

    @property
    def call_to_action_id(self):
        """Gets the call_to_action_id of this AdAcoBodyCommonMaterial.  # noqa: E501

        The ID of the CTA portfolio that you want to use in your ads. A CTA portfolio is a group of auto-optimized CTAs. For details about auto-optimized CTAs, see [CTA recommendations > Dynamic CTAs](https://ads.tiktok.com/marketing_api/docs?id=1740307296329730)  # noqa: E501

        :return: The call_to_action_id of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action_id

    @call_to_action_id.setter
    def call_to_action_id(self, call_to_action_id):
        """Sets the call_to_action_id of this AdAcoBodyCommonMaterial.

        The ID of the CTA portfolio that you want to use in your ads. A CTA portfolio is a group of auto-optimized CTAs. For details about auto-optimized CTAs, see [CTA recommendations > Dynamic CTAs](https://ads.tiktok.com/marketing_api/docs?id=1740307296329730)  # noqa: E501

        :param call_to_action_id: The call_to_action_id of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._call_to_action_id = call_to_action_id

    @property
    def creative_authorized(self):
        """Gets the creative_authorized of this AdAcoBodyCommonMaterial.  # noqa: E501

        Whether you grant displaying some of your ads in our TikTok for Business Creative Center. Only valid for non-US advertisers, the default value is `false`.  # noqa: E501

        :return: The creative_authorized of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: bool
        """
        return self._creative_authorized

    @creative_authorized.setter
    def creative_authorized(self, creative_authorized):
        """Sets the creative_authorized of this AdAcoBodyCommonMaterial.

        Whether you grant displaying some of your ads in our TikTok for Business Creative Center. Only valid for non-US advertisers, the default value is `false`.  # noqa: E501

        :param creative_authorized: The creative_authorized of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: bool
        """

        self._creative_authorized = creative_authorized

    @property
    def fallback_type(self):
        """Gets the fallback_type of this AdAcoBodyCommonMaterial.  # noqa: E501

        Fallback Type. If the audience do not have the app installed, you can have them fall back to install the app, or to view a specific web page.  Allowed values- `APP_INSTALL `, `WEBSITE`. If website is chosen, you need to specify the url via `landing_page_urls` field.  # noqa: E501

        :return: The fallback_type of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._fallback_type

    @fallback_type.setter
    def fallback_type(self, fallback_type):
        """Sets the fallback_type of this AdAcoBodyCommonMaterial.

        Fallback Type. If the audience do not have the app installed, you can have them fall back to install the app, or to view a specific web page.  Allowed values- `APP_INSTALL `, `WEBSITE`. If website is chosen, you need to specify the url via `landing_page_urls` field.  # noqa: E501

        :param fallback_type: The fallback_type of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._fallback_type = fallback_type

    @property
    def identity_id(self):
        """Gets the identity_id of this AdAcoBodyCommonMaterial.  # noqa: E501

        Identity ID, required when you use Spark Ads (`tiktok_item_id`).  # noqa: E501

        :return: The identity_id of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this AdAcoBodyCommonMaterial.

        Identity ID, required when you use Spark Ads (`tiktok_item_id`).  # noqa: E501

        :param identity_id: The identity_id of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this AdAcoBodyCommonMaterial.  # noqa: E501

        Identity type. Required when you use Spark Ads (`tiktok_item_id`). Enum values- `AUTH_CODE`, `TT_USER`. For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097).  # noqa: E501

        :return: The identity_type of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this AdAcoBodyCommonMaterial.

        Identity type. Required when you use Spark Ads (`tiktok_item_id`). Enum values- `AUTH_CODE`, `TT_USER`. For details about identities, see [Identities](https://ads.tiktok.com/marketing_api/docs?id=1738958351620097).  # noqa: E501

        :param identity_type: The identity_type of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def is_smart_creative(self):
        """Gets the is_smart_creative of this AdAcoBodyCommonMaterial.  # noqa: E501

        Whether the ad is a Smart Creative ad. Default value- `False`. Smart Creative is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative.  # noqa: E501

        :return: The is_smart_creative of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: bool
        """
        return self._is_smart_creative

    @is_smart_creative.setter
    def is_smart_creative(self, is_smart_creative):
        """Sets the is_smart_creative of this AdAcoBodyCommonMaterial.

        Whether the ad is a Smart Creative ad. Default value- `False`. Smart Creative is currently an allowlist-only feature. If you would like to access it, please contact your TikTok representative.  # noqa: E501

        :param is_smart_creative: The is_smart_creative of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: bool
        """

        self._is_smart_creative = is_smart_creative

    @property
    def playable_url(self):
        """Gets the playable_url of this AdAcoBodyCommonMaterial.  # noqa: E501

        Playable material url, valid only in Pangle placement. You can get the url via the [/playable/get/](https://ads.tiktok.com/marketing_api/docs?id=1737732758495234) endpoint. Note that all ads in the same ad group share the same playable material.  # noqa: E501

        :return: The playable_url of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: str
        """
        return self._playable_url

    @playable_url.setter
    def playable_url(self, playable_url):
        """Sets the playable_url of this AdAcoBodyCommonMaterial.

        Playable material url, valid only in Pangle placement. You can get the url via the [/playable/get/](https://ads.tiktok.com/marketing_api/docs?id=1737732758495234) endpoint. Note that all ads in the same ad group share the same playable material.  # noqa: E501

        :param playable_url: The playable_url of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: str
        """

        self._playable_url = playable_url

    @property
    def tracking_info(self):
        """Gets the tracking_info of this AdAcoBodyCommonMaterial.  # noqa: E501


        :return: The tracking_info of this AdAcoBodyCommonMaterial.  # noqa: E501
        :rtype: AdAcoBodyCommonMaterialTrackingInfo
        """
        return self._tracking_info

    @tracking_info.setter
    def tracking_info(self, tracking_info):
        """Sets the tracking_info of this AdAcoBodyCommonMaterial.


        :param tracking_info: The tracking_info of this AdAcoBodyCommonMaterial.  # noqa: E501
        :type: AdAcoBodyCommonMaterialTrackingInfo
        """

        self._tracking_info = tracking_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyCommonMaterial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyCommonMaterial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
