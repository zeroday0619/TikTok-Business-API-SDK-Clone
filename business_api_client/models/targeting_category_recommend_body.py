# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class TargetingCategoryRecommendBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'app_id': 'str',
        'region_codes': 'list[str]'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'app_id': 'app_id',
        'region_codes': 'region_codes'
    }

    def __init__(self, advertiser_id=None, app_id=None, region_codes=None):  # noqa: E501
        """TargetingCategoryRecommendBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._app_id = None
        self._region_codes = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if app_id is not None:
            self.app_id = app_id
        if region_codes is not None:
            self.region_codes = region_codes

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this TargetingCategoryRecommendBody.  # noqa: E501

        Advertiser ID  # noqa: E501

        :return: The advertiser_id of this TargetingCategoryRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this TargetingCategoryRecommendBody.

        Advertiser ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this TargetingCategoryRecommendBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def app_id(self):
        """Gets the app_id of this TargetingCategoryRecommendBody.  # noqa: E501

        ID of the mobile app that you want to promote. This field in optional and only valid if you want to promote a mobile app  # noqa: E501

        :return: The app_id of this TargetingCategoryRecommendBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TargetingCategoryRecommendBody.

        ID of the mobile app that you want to promote. This field in optional and only valid if you want to promote a mobile app  # noqa: E501

        :param app_id: The app_id of this TargetingCategoryRecommendBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def region_codes(self):
        """Gets the region_codes of this TargetingCategoryRecommendBody.  # noqa: E501

        List of country or region codes  # noqa: E501

        :return: The region_codes of this TargetingCategoryRecommendBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_codes

    @region_codes.setter
    def region_codes(self, region_codes):
        """Sets the region_codes of this TargetingCategoryRecommendBody.

        List of country or region codes  # noqa: E501

        :param region_codes: The region_codes of this TargetingCategoryRecommendBody.  # noqa: E501
        :type: list[str]
        """

        self._region_codes = region_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetingCategoryRecommendBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetingCategoryRecommendBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
