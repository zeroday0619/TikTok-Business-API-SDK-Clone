# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FileImageAdUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'file_id': 'str',
        'file_name': 'str',
        'image_file': 'str',
        'image_signature': 'str',
        'image_url': 'str',
        'upload_type': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'file_id': 'file_id',
        'file_name': 'file_name',
        'image_file': 'image_file',
        'image_signature': 'image_signature',
        'image_url': 'image_url',
        'upload_type': 'upload_type'
    }

    def __init__(self, advertiser_id=None, file_id=None, file_name=None, image_file=None, image_signature=None, image_url=None, upload_type=None):  # noqa: E501
        """FileImageAdUpload - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._file_id = None
        self._file_name = None
        self._image_file = None
        self._image_signature = None
        self._image_url = None
        self._upload_type = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if file_id is not None:
            self.file_id = file_id
        if file_name is not None:
            self.file_name = file_name
        if image_file is not None:
            self.image_file = image_file
        if image_signature is not None:
            self.image_signature = image_signature
        if image_url is not None:
            self.image_url = image_url
        if upload_type is not None:
            self.upload_type = upload_type

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this FileImageAdUpload.  # noqa: E501

        Advertiser ID  # noqa: E501

        :return: The advertiser_id of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this FileImageAdUpload.

        Advertiser ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this FileImageAdUpload.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def file_id(self):
        """Gets the file_id of this FileImageAdUpload.  # noqa: E501

        The file_id of the image that you want to upload. This field is for files that are uploaded to the file repository. You can get file_id via the Upload Files endpoints. This field is required when upload_type is UPLOAD_BY_FILE_ID.  # noqa: E501

        :return: The file_id of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileImageAdUpload.

        The file_id of the image that you want to upload. This field is for files that are uploaded to the file repository. You can get file_id via the Upload Files endpoints. This field is required when upload_type is UPLOAD_BY_FILE_ID.  # noqa: E501

        :param file_id: The file_id of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this FileImageAdUpload.  # noqa: E501

        Image name. Length limit：1-100 characters. The default value is the file name. If the final filename has more than 100 chars, it will be cut off.  # noqa: E501

        :return: The file_name of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileImageAdUpload.

        Image name. Length limit：1-100 characters. The default value is the file name. If the final filename has more than 100 chars, it will be cut off.  # noqa: E501

        :param file_name: The file_name of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def image_file(self):
        """Gets the image_file of this FileImageAdUpload.  # noqa: E501

        Picture file, required when upload_type is UPLOAD_BY_FILE.  # noqa: E501

        :return: The image_file of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._image_file

    @image_file.setter
    def image_file(self, image_file):
        """Sets the image_file of this FileImageAdUpload.

        Picture file, required when upload_type is UPLOAD_BY_FILE.  # noqa: E501

        :param image_file: The image_file of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._image_file = image_file

    @property
    def image_signature(self):
        """Gets the image_signature of this FileImageAdUpload.  # noqa: E501

        Md5 of the image (used for server verification). Required when upload_type is UPLOAD_BY_FILE.  # noqa: E501

        :return: The image_signature of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._image_signature

    @image_signature.setter
    def image_signature(self, image_signature):
        """Sets the image_signature of this FileImageAdUpload.

        Md5 of the image (used for server verification). Required when upload_type is UPLOAD_BY_FILE.  # noqa: E501

        :param image_signature: The image_signature of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._image_signature = image_signature

    @property
    def image_url(self):
        """Gets the image_url of this FileImageAdUpload.  # noqa: E501

        Image url address, like http://xxx.xxx. Required when upload_type is UPLOAD_BY_URL.  # noqa: E501

        :return: The image_url of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this FileImageAdUpload.

        Image url address, like http://xxx.xxx. Required when upload_type is UPLOAD_BY_URL.  # noqa: E501

        :param image_url: The image_url of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def upload_type(self):
        """Gets the upload_type of this FileImageAdUpload.  # noqa: E501

        Image upload method. Default value UPLOAD_BY_FILE.   Enum values: UPLOAD_BY_FILE, UPLOAD_BY_URL, UPLOAD_BY_FILE_ID.  # noqa: E501

        :return: The upload_type of this FileImageAdUpload.  # noqa: E501
        :rtype: str
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this FileImageAdUpload.

        Image upload method. Default value UPLOAD_BY_FILE.   Enum values: UPLOAD_BY_FILE, UPLOAD_BY_URL, UPLOAD_BY_FILE_ID.  # noqa: E501

        :param upload_type: The upload_type of this FileImageAdUpload.  # noqa: E501
        :type: str
        """

        self._upload_type = upload_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImageAdUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImageAdUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
