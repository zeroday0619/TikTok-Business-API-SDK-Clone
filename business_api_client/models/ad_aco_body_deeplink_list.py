# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class AdAcoBodyDeeplinkList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deeplink': 'str',
        'deeplink_type': 'str'
    }

    attribute_map = {
        'deeplink': 'deeplink',
        'deeplink_type': 'deeplink_type'
    }

    def __init__(self, deeplink=None, deeplink_type=None):  # noqa: E501
        """AdAcoBodyDeeplinkList - a model defined in Swagger"""  # noqa: E501
        self._deeplink = None
        self._deeplink_type = None
        self.discriminator = None
        if deeplink is not None:
            self.deeplink = deeplink
        if deeplink_type is not None:
            self.deeplink_type = deeplink_type

    @property
    def deeplink(self):
        """Gets the deeplink of this AdAcoBodyDeeplinkList.  # noqa: E501

        The specific location where you want your audience to go if they have your app installed.  # noqa: E501

        :return: The deeplink of this AdAcoBodyDeeplinkList.  # noqa: E501
        :rtype: str
        """
        return self._deeplink

    @deeplink.setter
    def deeplink(self, deeplink):
        """Sets the deeplink of this AdAcoBodyDeeplinkList.

        The specific location where you want your audience to go if they have your app installed.  # noqa: E501

        :param deeplink: The deeplink of this AdAcoBodyDeeplinkList.  # noqa: E501
        :type: str
        """

        self._deeplink = deeplink

    @property
    def deeplink_type(self):
        """Gets the deeplink_type of this AdAcoBodyDeeplinkList.  # noqa: E501

        The open URL type. Allowed values differs based on campaign objectives. Allowed values- `NORMAL` (supported in Traffic, Conversion), `DEFERRED_DEEPLINK` (supported in App Install ). The default value is `NORMAL`. For an ad that will be included in an iOS 14 campaign, this field cannot be set to `DEFERRED_DEEPLINK`.  # noqa: E501

        :return: The deeplink_type of this AdAcoBodyDeeplinkList.  # noqa: E501
        :rtype: str
        """
        return self._deeplink_type

    @deeplink_type.setter
    def deeplink_type(self, deeplink_type):
        """Sets the deeplink_type of this AdAcoBodyDeeplinkList.

        The open URL type. Allowed values differs based on campaign objectives. Allowed values- `NORMAL` (supported in Traffic, Conversion), `DEFERRED_DEEPLINK` (supported in App Install ). The default value is `NORMAL`. For an ad that will be included in an iOS 14 campaign, this field cannot be set to `DEFERRED_DEEPLINK`.  # noqa: E501

        :param deeplink_type: The deeplink_type of this AdAcoBodyDeeplinkList.  # noqa: E501
        :type: str
        """

        self._deeplink_type = deeplink_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdAcoBodyDeeplinkList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdAcoBodyDeeplinkList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
