# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringVideoAdSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'displayable': 'bool',
        'height': 'int',
        'material_ids': 'list[str]',
        'ratio': 'list[float]',
        'video_ids': 'list[str]',
        'width': 'int'
    }

    attribute_map = {
        'displayable': 'displayable',
        'height': 'height',
        'material_ids': 'material_ids',
        'ratio': 'ratio',
        'video_ids': 'video_ids',
        'width': 'width'
    }

    def __init__(self, displayable=None, height=None, material_ids=None, ratio=None, video_ids=None, width=None):  # noqa: E501
        """FilteringVideoAdSearch - a model defined in Swagger"""  # noqa: E501
        self._displayable = None
        self._height = None
        self._material_ids = None
        self._ratio = None
        self._video_ids = None
        self._width = None
        self.discriminator = None
        if displayable is not None:
            self.displayable = displayable
        if height is not None:
            self.height = height
        if material_ids is not None:
            self.material_ids = material_ids
        if ratio is not None:
            self.ratio = ratio
        if video_ids is not None:
            self.video_ids = video_ids
        if width is not None:
            self.width = width

    @property
    def displayable(self):
        """Gets the displayable of this FilteringVideoAdSearch.  # noqa: E501

        Enum values: \\n False(default value): Search in all materials \\n True: Search in the materials displayed on the platform.  # noqa: E501

        :return: The displayable of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: bool
        """
        return self._displayable

    @displayable.setter
    def displayable(self, displayable):
        """Sets the displayable of this FilteringVideoAdSearch.

        Enum values: \\n False(default value): Search in all materials \\n True: Search in the materials displayed on the platform.  # noqa: E501

        :param displayable: The displayable of this FilteringVideoAdSearch.  # noqa: E501
        :type: bool
        """

        self._displayable = displayable

    @property
    def height(self):
        """Gets the height of this FilteringVideoAdSearch.  # noqa: E501

        Video height.  # noqa: E501

        :return: The height of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FilteringVideoAdSearch.

        Video height.  # noqa: E501

        :param height: The height of this FilteringVideoAdSearch.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def material_ids(self):
        """Gets the material_ids of this FilteringVideoAdSearch.  # noqa: E501

        A list of material IDs. At most 100 IDs can be included in the list.  # noqa: E501

        :return: The material_ids of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._material_ids

    @material_ids.setter
    def material_ids(self, material_ids):
        """Sets the material_ids of this FilteringVideoAdSearch.

        A list of material IDs. At most 100 IDs can be included in the list.  # noqa: E501

        :param material_ids: The material_ids of this FilteringVideoAdSearch.  # noqa: E501
        :type: list[str]
        """

        self._material_ids = material_ids

    @property
    def ratio(self):
        """Gets the ratio of this FilteringVideoAdSearch.  # noqa: E501

        Video aspect ratio, e.g.: [1.7, 2.5]. Use 1.7 to search for videos with aspect ratio between 1.65-1.75, i.e. the precision floating point is 0.05.  # noqa: E501

        :return: The ratio of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: list[float]
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this FilteringVideoAdSearch.

        Video aspect ratio, e.g.: [1.7, 2.5]. Use 1.7 to search for videos with aspect ratio between 1.65-1.75, i.e. the precision floating point is 0.05.  # noqa: E501

        :param ratio: The ratio of this FilteringVideoAdSearch.  # noqa: E501
        :type: list[float]
        """

        self._ratio = ratio

    @property
    def video_ids(self):
        """Gets the video_ids of this FilteringVideoAdSearch.  # noqa: E501

        A list of video IDs. At most 100 IDs can be included in the list.  # noqa: E501

        :return: The video_ids of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._video_ids

    @video_ids.setter
    def video_ids(self, video_ids):
        """Sets the video_ids of this FilteringVideoAdSearch.

        A list of video IDs. At most 100 IDs can be included in the list.  # noqa: E501

        :param video_ids: The video_ids of this FilteringVideoAdSearch.  # noqa: E501
        :type: list[str]
        """

        self._video_ids = video_ids

    @property
    def width(self):
        """Gets the width of this FilteringVideoAdSearch.  # noqa: E501

        Video width.  # noqa: E501

        :return: The width of this FilteringVideoAdSearch.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FilteringVideoAdSearch.

        Video width.  # noqa: E501

        :param width: The width of this FilteringVideoAdSearch.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringVideoAdSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringVideoAdSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
