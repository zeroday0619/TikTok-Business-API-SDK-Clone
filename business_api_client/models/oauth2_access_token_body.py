# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class Oauth2AccessTokenBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'auth_code': 'str',
        'secret': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        'auth_code': 'auth_code',
        'secret': 'secret'
    }

    def __init__(self, app_id=None, auth_code=None, secret=None):  # noqa: E501
        """Oauth2AccessTokenBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._auth_code = None
        self._secret = None
        self.discriminator = None
        self.app_id = app_id
        self.auth_code = auth_code
        self.secret = secret

    @property
    def app_id(self):
        """Gets the app_id of this Oauth2AccessTokenBody.  # noqa: E501

        The App ID applied by the developer. It can be found in the Basic Information section for you app under [My Apps](https://ads.tiktok.com/marketing_api/apps/).  # noqa: E501

        :return: The app_id of this Oauth2AccessTokenBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Oauth2AccessTokenBody.

        The App ID applied by the developer. It can be found in the Basic Information section for you app under [My Apps](https://ads.tiktok.com/marketing_api/apps/).  # noqa: E501

        :param app_id: The app_id of this Oauth2AccessTokenBody.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def auth_code(self):
        """Gets the auth_code of this Oauth2AccessTokenBody.  # noqa: E501

        Authorization code provided once the callback is complete.  # noqa: E501

        :return: The auth_code of this Oauth2AccessTokenBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this Oauth2AccessTokenBody.

        Authorization code provided once the callback is complete.  # noqa: E501

        :param auth_code: The auth_code of this Oauth2AccessTokenBody.  # noqa: E501
        :type: str
        """
        if auth_code is None:
            raise ValueError("Invalid value for `auth_code`, must not be `None`")  # noqa: E501

        self._auth_code = auth_code

    @property
    def secret(self):
        """Gets the secret of this Oauth2AccessTokenBody.  # noqa: E501

        The private key of the developer's App. It can be found in the Basic Information section for your app under [My Apps](https://ads.tiktok.com/marketing_api/apps/).  # noqa: E501

        :return: The secret of this Oauth2AccessTokenBody.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Oauth2AccessTokenBody.

        The private key of the developer's App. It can be found in the Basic Information section for your app under [My Apps](https://ads.tiktok.com/marketing_api/apps/).  # noqa: E501

        :param secret: The secret of this Oauth2AccessTokenBody.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Oauth2AccessTokenBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Oauth2AccessTokenBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
