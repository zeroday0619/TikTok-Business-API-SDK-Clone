# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class IdentityCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'display_name': 'str',
        'image_uri': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'display_name': 'display_name',
        'image_uri': 'image_uri'
    }

    def __init__(self, advertiser_id=None, display_name=None, image_uri=None):  # noqa: E501
        """IdentityCreateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._display_name = None
        self._image_uri = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.display_name = display_name
        self.image_uri = image_uri

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this IdentityCreateBody.  # noqa: E501

        Advertiser ID  # noqa: E501

        :return: The advertiser_id of this IdentityCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this IdentityCreateBody.

        Advertiser ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this IdentityCreateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def display_name(self):
        """Gets the display_name of this IdentityCreateBody.  # noqa: E501

        Display name. The maximum length is 100 characters.  # noqa: E501

        :return: The display_name of this IdentityCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IdentityCreateBody.

        Display name. The maximum length is 100 characters.  # noqa: E501

        :param display_name: The display_name of this IdentityCreateBody.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def image_uri(self):
        """Gets the image_uri of this IdentityCreateBody.  # noqa: E501

        `image_id` of the avatar. It can be uploaded through the [Upload an image](https://ads.tiktok.com/marketing_api/docs?id=1737172488964097) endpoint. Width and height ratio must be 1:1.  # noqa: E501

        :return: The image_uri of this IdentityCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this IdentityCreateBody.

        `image_id` of the avatar. It can be uploaded through the [Upload an image](https://ads.tiktok.com/marketing_api/docs?id=1737172488964097) endpoint. Width and height ratio must be 1:1.  # noqa: E501

        :param image_uri: The image_uri of this IdentityCreateBody.  # noqa: E501
        :type: str
        """
        if image_uri is None:
            raise ValueError("Invalid value for `image_uri`, must not be `None`")  # noqa: E501

        self._image_uri = image_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
