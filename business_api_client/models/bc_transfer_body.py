# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class BcTransferBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'bc_id': 'str',
        'cash_amount': 'float',
        'grant_amount': 'float',
        'transfer_type': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'bc_id': 'bc_id',
        'cash_amount': 'cash_amount',
        'grant_amount': 'grant_amount',
        'transfer_type': 'transfer_type'
    }

    def __init__(self, advertiser_id=None, bc_id=None, cash_amount=None, grant_amount=None, transfer_type=None):  # noqa: E501
        """BcTransferBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._bc_id = None
        self._cash_amount = None
        self._grant_amount = None
        self._transfer_type = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        self.bc_id = bc_id
        if cash_amount is not None:
            self.cash_amount = cash_amount
        if grant_amount is not None:
            self.grant_amount = grant_amount
        self.transfer_type = transfer_type

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this BcTransferBody.  # noqa: E501

        Ad Account ID  # noqa: E501

        :return: The advertiser_id of this BcTransferBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this BcTransferBody.

        Ad Account ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this BcTransferBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def bc_id(self):
        """Gets the bc_id of this BcTransferBody.  # noqa: E501

        Business Center ID  # noqa: E501

        :return: The bc_id of this BcTransferBody.  # noqa: E501
        :rtype: str
        """
        return self._bc_id

    @bc_id.setter
    def bc_id(self, bc_id):
        """Sets the bc_id of this BcTransferBody.

        Business Center ID  # noqa: E501

        :param bc_id: The bc_id of this BcTransferBody.  # noqa: E501
        :type: str
        """
        if bc_id is None:
            raise ValueError("Invalid value for `bc_id`, must not be `None`")  # noqa: E501

        self._bc_id = bc_id

    @property
    def cash_amount(self):
        """Gets the cash_amount of this BcTransferBody.  # noqa: E501

        The amount to process. You need to specify either cash_amount or grant_amount. Rounded to two decimal places. Value range > 0.  # noqa: E501

        :return: The cash_amount of this BcTransferBody.  # noqa: E501
        :rtype: float
        """
        return self._cash_amount

    @cash_amount.setter
    def cash_amount(self, cash_amount):
        """Sets the cash_amount of this BcTransferBody.

        The amount to process. You need to specify either cash_amount or grant_amount. Rounded to two decimal places. Value range > 0.  # noqa: E501

        :param cash_amount: The cash_amount of this BcTransferBody.  # noqa: E501
        :type: float
        """

        self._cash_amount = cash_amount

    @property
    def grant_amount(self):
        """Gets the grant_amount of this BcTransferBody.  # noqa: E501

        Coupon/voucher amount. You need to specify either `cash_amount` or `grant_amount`. Rounded to two decimal places. Value range > 0  # noqa: E501

        :return: The grant_amount of this BcTransferBody.  # noqa: E501
        :rtype: float
        """
        return self._grant_amount

    @grant_amount.setter
    def grant_amount(self, grant_amount):
        """Sets the grant_amount of this BcTransferBody.

        Coupon/voucher amount. You need to specify either `cash_amount` or `grant_amount`. Rounded to two decimal places. Value range > 0  # noqa: E501

        :param grant_amount: The grant_amount of this BcTransferBody.  # noqa: E501
        :type: float
        """

        self._grant_amount = grant_amount

    @property
    def transfer_type(self):
        """Gets the transfer_type of this BcTransferBody.  # noqa: E501

        How you'd like to process payments from an ad account. Enum values：`RECHARGE`(transfer), `REFUND`(deduction)  # noqa: E501

        :return: The transfer_type of this BcTransferBody.  # noqa: E501
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this BcTransferBody.

        How you'd like to process payments from an ad account. Enum values：`RECHARGE`(transfer), `REFUND`(deduction)  # noqa: E501

        :param transfer_type: The transfer_type of this BcTransferBody.  # noqa: E501
        :type: str
        """
        if transfer_type is None:
            raise ValueError("Invalid value for `transfer_type`, must not be `None`")  # noqa: E501

        self._transfer_type = transfer_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcTransferBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcTransferBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
