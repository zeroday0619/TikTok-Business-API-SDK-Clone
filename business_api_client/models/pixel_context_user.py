# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class PixelContextUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'external_id': 'str',
        'phone_number': 'str',
        'ttp': 'str'
    }

    attribute_map = {
        'email': 'email',
        'external_id': 'external_id',
        'phone_number': 'phone_number',
        'ttp': 'ttp'
    }

    def __init__(self, email=None, external_id=None, phone_number=None, ttp=None):  # noqa: E501
        """PixelContextUser - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._external_id = None
        self._phone_number = None
        self._ttp = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if external_id is not None:
            self.external_id = external_id
        if phone_number is not None:
            self.phone_number = phone_number
        if ttp is not None:
            self.ttp = ttp

    @property
    def email(self):
        """Gets the email of this PixelContextUser.  # noqa: E501

        The email of the customer if available. It must be hashed with SHA256 on the client side.  # noqa: E501

        :return: The email of this PixelContextUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PixelContextUser.

        The email of the customer if available. It must be hashed with SHA256 on the client side.  # noqa: E501

        :param email: The email of this PixelContextUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this PixelContextUser.  # noqa: E501

        Any unique identifier on the advertisers side, such as loyalty membership IDs, user IDs, and external cookie IDs. It must be hashed with SHA256 on the client side.  # noqa: E501

        :return: The external_id of this PixelContextUser.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PixelContextUser.

        Any unique identifier on the advertisers side, such as loyalty membership IDs, user IDs, and external cookie IDs. It must be hashed with SHA256 on the client side.  # noqa: E501

        :param external_id: The external_id of this PixelContextUser.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def phone_number(self):
        """Gets the phone_number of this PixelContextUser.  # noqa: E501

        The phone number of the customer if available. It must be hashed with SHA256 on the client side.  # noqa: E501

        :return: The phone_number of this PixelContextUser.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PixelContextUser.

        The phone number of the customer if available. It must be hashed with SHA256 on the client side.  # noqa: E501

        :param phone_number: The phone_number of this PixelContextUser.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def ttp(self):
        """Gets the ttp of this PixelContextUser.  # noqa: E501

        Cookie ID. If you also use Pixel SDK and enabled cookie, Pixel SDK automatically saves a unique identifier in the _ttp cookie. The value of _ttp is used to match website visitor events with TikTok ads. You can extract the value of _ttp and attach the value here. For details, see [Set up TikTok Click ID and Cookies](https://ads.tiktok.com/marketing_api/docs?id=1739584860883969)  # noqa: E501

        :return: The ttp of this PixelContextUser.  # noqa: E501
        :rtype: str
        """
        return self._ttp

    @ttp.setter
    def ttp(self, ttp):
        """Sets the ttp of this PixelContextUser.

        Cookie ID. If you also use Pixel SDK and enabled cookie, Pixel SDK automatically saves a unique identifier in the _ttp cookie. The value of _ttp is used to match website visitor events with TikTok ads. You can extract the value of _ttp and attach the value here. For details, see [Set up TikTok Click ID and Cookies](https://ads.tiktok.com/marketing_api/docs?id=1739584860883969)  # noqa: E501

        :param ttp: The ttp of this PixelContextUser.  # noqa: E501
        :type: str
        """

        self._ttp = ttp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PixelContextUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PixelContextUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
